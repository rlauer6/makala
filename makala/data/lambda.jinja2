# {{ timestamp }}

resource "aws_lambda_function" "{{ name }}" {
  filename         = "{{ name }}.zip"
  function_name    = "{{ name }}"
  role             = "{{ role_arn if role else custom_role }}"
  handler          = "{{ name }}.{{ handler }}"
  
  source_code_hash = filebase64sha256("{{ name }}.zip")
  runtime          = "{{ runtime }}"
  timeout          = "{{ timeout }}"
  
  {% if vpc.subnet_ids|length != 0 %} 
  vpc_config  {
    subnet_ids = {{ vpc.subnet_ids|tojson }}
    security_group_ids = {{ vpc.security_group_ids|tojson }}
  }
  {% endif %}

  {% if env is defined %}
  environment {
    variables = {
      {% for e in env %}
        {{ e }} = "{{ env[e] }}"
      {% endfor %} 
    }
  }    
  {% endif %}
  
}

resource "aws_lambda_permission" "{{ name }}-permission" {
  action = "lambda:InvokeFunction"
  {% if source_arn %}
  source_arn = "{{ source_arn }}"
  {% else %}
  source_account = "{{ source_account }}"
  {% endif %}
  function_name = aws_lambda_function.{{ name }}.arn
  principal = "{{ service }}"
}

{% if custom_role is not defined %}
resource "aws_iam_role" "{{ name }}-role" {
  name = "{{ name }}-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF

}

resource "aws_iam_role_policy_attachment" "{{ name }}-policy-attachment" {
  role       = aws_iam_role.{{ name }}-role.name
  
{% if vpc.subnet_ids|length == 0 %}
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
{% else %}
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
{% endif %}
}
{% endif %}
