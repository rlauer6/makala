# {{ timestamp }}
# makala {{ version }}

{% if vpc.subnet_ids|length != 0 %}
locals {
  security_group_id = data.aws_security_group.security_group.id
}
{% endif %}

resource "aws_lambda_function" "{{ name }}" {
  filename         = "../{{ name }}.zip"
  function_name    = "{{ name }}"
  role             = "{{ role_arn if role else custom_role }}"
  handler          = "{{ name }}.{{ handler }}"
  description      = "{{ description }}"
  source_code_hash = filebase64sha256("../{{ name }}.zip")
  runtime          = "{{ runtime }}"
  timeout          = "{{ timeout }}"
  publish          = false
  
  {% if vpc.subnet_ids|length != 0 %} 
  vpc_config  {
    subnet_ids = {{ vpc.subnet_ids|tojson }}
    security_group_ids = {{ vpc.security_group_ids|tojson }}
  }
  {% endif %}

  {% if env is defined %}
  environment {
    variables = {
      {% for e in env %}
        {{ e }} = "{{ env[e] }}"
      {% endfor %} 
    }
  }    
  {% endif %}
  
}

{% if service is defined %}
resource "aws_lambda_permission" "{{ name }}-permission" {
  action = "lambda:InvokeFunction"
  {% if source_arn %}
  source_arn = "{{ source_arn }}"
  {% endif %}
  {% if source_account %}
  source_account = "{{ source_account }}"
  {% endif %}
  function_name = aws_lambda_function.{{ name }}.arn
  principal = "{{ service }}"
}
{% endif %}

{% if custom_role is not defined %}
resource "aws_iam_role" "{{ name }}-role" {
  name = "{{ name }}-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF

}

resource "aws_iam_role_policy_attachment" "{{ name }}-policy-attachment" {
  role       = aws_iam_role.{{ name }}-role.name
  
{% if vpc.subnet_ids|length == 0 %}
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
{% else %}
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
{% endif %}
}
{% endif %}

{%if service == "events.amazonaws.com" %}
resource "aws_cloudwatch_event_rule" "event_rule" {
  name        = "{{ name }}-event"
  description = ""
  
  schedule_expression = ""
  is_enabled = true 
}

resource "aws_cloudwatch_event_target" "event_target" {
  rule = "{{ name }}-event"
  arn = aws_lambda_function.{{ name }}.arn
}
  
{% endif %}

{%if service == "sns.amazonaws.com" %}
resource "aws_sns_topic" "{{name}}_sns_topic" {
  name = "{{ sns_topic }}"
}

resource "aws_sns_topic_subscription" "{{ name }}_sns_topic_subscription" {
  topic_arn = aws_sns_topic.{{ name }}_sns_topic.arn
  protocol = "lambda"
  endpoint = aws_lambda_function.{{ name }}.arn
}
{% endif %}
    
