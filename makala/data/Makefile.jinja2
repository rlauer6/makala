#--*- mode: makefile; -*-
# --- DO NOT EDIT...this is a rendered file
# --- {{ timestamp }}

LAMBDA_NAME = {{ name }}

BUCKET = {{ bucket }}

{% if profile is defined and profile != ""  %}
AWS_PROFILE = {{ profile }}
{% endif %}

RUNTIME = {{ runtime }}

LAMBDA_ROLE = {{ role }}

REGION = {{ region }}

LOG_RETENTION = {{ logs.retention }}

LAMBDA_SERVICE = {{ service }}

PACKAGES = {{ packages }}

PACKAGE_FILES = {{ package_files }}

GPACKAGE_FILES = $(PACKAGE_FILES:.py=.pyc)

MODULES = {{ modules }}

GMODULES = $(MODULES:.py=.pyc)

HANDLER_NAME = {{ handler }}

CUSTOM_ROLE = {{ custom_role }}

CACHE_DIR = {{ cache_dir }}

{% if source_arn is defined %}
SOURCE_ARN = {{ source_arn }}
{% endif %}

{% if source_account is defined %}
SOURCE_ACCOUNT = {{ source_account }}
{% endif %}

ACCOUNT = {{ account }}

{% if sns_topic is defined %}
SNS_TOPIC_NAME = {{ sns_topic }}
SNS_SUBSCRIPTION = $(CACHE_DIR)/$(SNS_TOPIC_NAME)-subscription.arn
SNS_TOPIC = $(CACHE_DIR)/$(SNS_TOPIC_NAME)-topic.arn
{% endif %}

{% if bucket is defined %}
BUCKET_ARN = $(CACHE_DIR)/$(BUCKET)-bucket.arn
BUCKET_NOTIFICATION = $(CACHE_DIR)/$(BUCKET)-bucket-notification.json.in
GBUCKET_NOTIFICATION = $(BUCKET_NOTIFICATION:.json.in=.json)
{% endif %}

{% if sqs.queue_name is defined %}
SQS_QUEUE_NAME = {{ sqs.queue_name }}

SQS_QUEUE_URL = $(CACHE_DIR)/$(LAMBDA_NAME)-queue-url.json
SQS_QUEUE_ARN = {{ sqs.queue_arn }}
SQS_QUEUE_ATTRIBUTES = $(CACHE_DIR)/$(LAMBDA_NAME)-queue-attributes.json
LAMBDA_EVENT_SOURCE = $(CACHE_DIR)/$(LAMBDA_NAME)-event-source.json
{% endif %}

# ------------------------------------------------

#  don't duplicate symlinked files, max compression, just update
ZIP = zip -y -r9 -u

LAMBDA_FILE = $(LAMBDA_NAME)

LAMBDA_CONFIG = $(LAMBDA_NAME).yaml

ZIPFILE = \
    $(LAMBDA_NAME).zip

ROLE_ARN = \
    $(CACHE_DIR)/$(LAMBDA_ROLE).arn

CUSTOM_ROLE_ARN = \
    $(CACHE_DIR)/$(CUSTOM_ROLE).arn

# dependency is either on a custom role or role created by makala
ifeq ("$(LAMBDA_ROLE)", "")
LAMBDA_ROLE_ARN=$(CUSTOM_ROLE_ARN)
else
LAMBDA_ROLE_ARN=$(ROLE_ARN)
endif

LAMBDA = \
    $(LAMBDA_NAME).py

GLAMBDA = $(LAMBDA:.py=.pyc)

LAMBDA_ARN = \
    $(CACHE_DIR)/$(LAMBDA_NAME).arn

LAMBDA_HANDLER = $(LAMBDA_NAME)

LAMBDA_LOG_GROUP_NAME = /aws/lambda/$(LAMBDA_NAME)

LAMBDA_LOG_GROUP = \
    $(CACHE_DIR)/$(LAMBDA_NAME)-log-group.json

LAMBDA_ENV = \
    $(CACHE_DIR)/$(LAMBDA_NAME)-env.json

VPC_CONFIG = \
    $(CACHE_DIR)/vpc-config.json

LAMBDA_CONFIGURATION = \
    $(CACHE_DIR)/$(LAMBDA_NAME)-config.json

LAMBDA_PERMISSION = \
    $(CACHE_DIR)/$(LAMBDA_NAME)-permission.json

all: \
    $(ZIPFILE) \
    $(LAMBDA_ARN) \
    $(LAMBDA_PERMISSION) \
    $(LAMBDA_CONFIGURATION) {% if sqs.queue_name is defined %} $(LAMBDA_EVENT_SOURCE) {% endif %} \
    Makefile

$(CUSTOM_ROLE_ARN): $(LAMBDA_CONFIG)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -n "$(CUSTOM_ROLE)"; then \
	  ROLE=$$(aws iam get-role --role-name $(CUSTOM_ROLE) 2>/dev/null); \
	  if test -n "$$ROLE"; then \
	    echo $$ROLE | jq -r .Role.Arn > $@; \
	  else \
	    echo "No such role: $(CUSTOM_ROLE)"; \
	    false; \
	  fi; \
	else \
	  test -e $@ || touch $@; \
	fi
	test -e $(LAMBDA_ARN) && touch $(LAMBDA_ARN) || true

$(ROLE_ARN): $(LAMBDA_CONFIG)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -n "$(LAMBDA_ROLE)"; then \
	  ROLE=$$(aws iam get-role --role-name $(LAMBDA_ROLE) 2>/dev/null); \
	  if test -z "$$ROLE"; then \
	    makala -o $(LAMBDA_NAME); \
	    sleep 10; \
	  else \
	    echo $$ROLE | jq -r .Role.Arn > $@; \
	  fi; \
	else \
	  test -e $@ || touch $@; \
	fi
	set -x; test -e $(LAMBDA_ARN) && touch $(LAMBDA_ARN) || true

# Target for initial creation of Lambda
# Note: this target is dependent on an IAM role and a log
# group however it can be triggered whenver the Lambda role is updated. If
# the Lambda has already been created we will want to update the function
# configuration.

$(LAMBDA_ARN): $(LAMBDA_LOG_GROUP) $(LAMBDA_ROLE_ARN)
	test -n "$$DEBUG" && set -x; \
	if ! test -d cache; then \
	  mkdir $(CACHE_DIR); \
	fi

	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -e $(LAMBDA_ENV); then \
	  ENVIRONMENT='--environment file://./'$(LAMBDA_ENV); \
	fi; \
	if ! test -e "$@"; then \
	  aws lambda create-function \
            {{ vpc_config_option }} \
	    --role $$(cat $(LAMBDA_ROLE_ARN)) \
	    --runtime $(RUNTIME) \
	    --function-name $(LAMBDA_HANDLER) \
	    --handler $(LAMBDA_HANDLER).$(HANDLER_NAME) \
	    --description '{{ description }}' \
	    $$ENVIRONMENT \
	    --timeout {{ timeout }} \
	    --memory-size {{ memory }} \
	    --zip-file fileb://$(ZIPFILE) > $(LAMBDA_CONFIGURATION); \
	  if test -s $(LAMBDA_CONFIGURATION); then \
	    cat $(LAMBDA_CONFIGURATION) | jq -r .FunctionArn > $@; \
	  else \
	    rm -f $(LAMBDA_CONFIGURATION); \
	    false; \
	  fi; \
	else \
	  touch $@; \
	fi

%.pyc: %.py
	PYTHON=$$(which python3); \
	$$PYTHON -c "import sys; import py_compile; sys.exit(0) if py_compile.compile('"$<"', '"$@"') else sys.exit(-1)"

zip: $(ZIPFILE)


requirements.txt:
	PIP=$$(which pip3); \
	$$PIP freeze > $@

$(ZIPFILE): \
    $(LAMBDA) \
    $(GLAMBDA) \
    $(GMODULES) \
    $(GPACKAGE_FILES) \
    requirements.txt

	# zip/update dependencies
	test -n "$$DEBUG" && set -x; \
	PERL=$$(which perl); \
	PIP=$$(which pip3); \
	currdir=$$(pwd); \
	for a in lib lib64; do \
	  if test -d $$a && ! test -L $$a; then \
	    cd $$currdir; \
	    cd $$a/$(RUNTIME)/site-packages; \
	    find . -exec touch -t 200010101010 {} + || true; \
	    for f in $$(cat $$currdir/requirements.txt | $$PERL -npe 's/^(.*?)==.*$$/$$1/;'); do \
	      $$PIP show -f $$f | grep "^ " | $$PERL -npe 's/^\s+//' | $(ZIP)  -@ $$currdir/$@ || true; \
	    done; \
	  fi; \
	done

	# zip/update up local modules
	test -n "$$DEBUG" && set -x; \
	if test -n "$(MODULES)"; then \
	  for f in $(MODULES); do \
	    find $f -exec touch -t 200010101010 {} + || true; \
	    zip -r9 -u $@ $$f || true; \
	  done; \
	fi

	# packages
	test -n "$$DEBUG" && set -x; \
	if test -n "$(PACKAGE_FILES)"; then \
	  for p in $(PACKAGE_FILES); do \
	    find $p -exec touch -t 200010101010 {} + || true; \
	    zip -r9 -u $@ $$p || true; \
	  done; \
	fi

	# zip/update lambda
	zip -d $@ $< || true
	zip -u -g $@ $< || true

# anytime the lambda configuration changes we need to regenerate the
# Makefile...
Makefile: $(LAMBDA_CONFIG)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	makala -o $(LAMBDA_NAME)

# update configuration if {{ name }}.yaml changes

# Why the :: rule? What does that do?

# We have a target that is built in one of two different ways
# depending on what dependencies have changed. make allows us to
# create two different rules for the same target.  These are treated
# completely indepdent of each
# other. https://www.gnu.org/software/make/manual/html_node/Double_002dColon.html
# 
# Our target(s), although somewhat articifical (output of various aws
# CLI creation and update invockations), create a convenient target
# that we can build whenever we detect that that a depdency changes
# that requires we update the Lambda or its configuration in some
# manner.
#
# So, depending on whether we are creating the Lambda for the first
# time or updating the lambda we'll need to build the target in a
# slightly different manner. We could try to detect if this is the
# first time creation and create an if/then test in one rule, however
# make gives us the ability to create two different rules for one
# target.

$(LAMBDA_CONFIGURATION):: $(LAMBDA_CONFIG) $(LAMBDA_ROLE_ARN)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -e $(LAMBDA_ARN); then \
	  if test -e $(LAMBDA_ENV); then \
	    ENVIRONMENT='--environment file://./'$(LAMBDA_ENV); \
	  fi; \
	  STATE=$$(aws lambda get-function-configuration --function-name $(LAMBDA_NAME) | jq -r .State); \
	  if [ "$$STATE" = "Active" ]; then \
	    aws lambda update-function-configuration \
	      --function-name $(LAMBDA_NAME) \
	      --description '{{ description }}' \
	      {{ vpc_config_option }} \
	      --role $$(cat $(LAMBDA_ROLE_ARN)) \
	      --runtime $(RUNTIME) \
	      --handler $(LAMBDA_NAME).$(HANDLER_NAME) \
	      --timeout {{ timeout }} \
	      --memory-size {{ memory }} \
	      $$ENVIRONMENT > $@; cat $@;\
	  else \
	    echo "Lambda state ($$STATE) not Active"; \
	  fi; \
	fi

$(LAMBDA_CONFIGURATION):: \
  $(ZIPFILE) {% if bucket is defined %}$(GBUCKET_NOTIFICATION){% endif %} {% if sns_topic is defined %} $(SNS_TOPIC) $(SNS_SUBSCRIPTION) {% endif %}
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -e "$(LAMBDA_ARN)"; then \
	  aws lambda update-function-code \
	    --zip-file fileb://$(ZIPFILE) --function $(LAMBDA_HANDLER) > $@; cat $@; \
	fi

$(LAMBDA_LOG_GROUP):
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	aws logs create-log-group --log-group-name $(LAMBDA_LOG_GROUP_NAME) >$@; \
	aws logs put-retention-policy --log-group-name $(LAMBDA_LOG_GROUP_NAME) \
	  --retention-in-days $(LOG_RETENTION)

{% if sns_topic is defined %} 
$(SNS_TOPIC): $(LAMBDA_CONFIG)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	SNS_TOPIC_ARN=$(aws sns list-topics | jq -r '.Topics|map(select(.TopicArn | match("'$(SNS_TOPIC_NAME)'")))[]|.TopicArn'); \
	if test -n "$$SNS_TOPIC_ARN"; then \
	  echo $$SNS_TOPIC_ARN > $@; \
	else \
	  aws sns create-topic --name $(SNS_TOPIC_NAME) | jq -r .TopicArn >$@; \
	fi

$(SNS_SUBSCRIPTION): $(LAMBDA_ARN) $(SNS_TOPIC)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	SUBSCRIPTION_ARN=$$(aws sns list-subscriptions | jq -r '.Subscriptions|map(select(.TopicArn | match("'$(SNS_TOPIC)'")))|map(select(.Protocol | match("lambda")))[]|.SubscriptionArn'); \
	if test -z $(SUBSCRIPTION_ARN); then \
	  ENDPOINT_ARN=$$(cat $(LAMBDA_ARN)); \
	  TOPIC_ARN=$$(cat $(SNS_TOPIC)); \
	  aws sns subscribe --protocol lambda --notification-endpoint $$ENDPOINT_ARN --topic-arn $$TOPIC_ARN | jq -r .SubscriptionArn > $@; \
	fi
{% endif %}

$(LAMBDA_PERMISSION): $(LAMBDA_ARN) $(LAMBDA_CONFIG)

	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -e "$@"; then \
	  OLD_SERVICE=$$(cat $@ | jq -r .Principal.Service); \
          OLD_SID=$$(cat $@ | jq -r .Sid); \
	fi;\
	if test -n "$(LAMBDA_SERVICE)"; then \
	  if ! [ "$$OLD_SERVICE" = "$(LAMBDA_SERVICE)" ]; then \
	    if test -n "$$OLD_SERVICE"; then \
	      REMOVE_SID=$$OLD_SID; \
	    fi; \
	    FUNCTION_ARN=$$(cat $(LAMBDA_ARN)) | jq -r .FunctionArn; \
	    if test -n "$(SOURCE_ACCOUNT)"; then \
		SOURCE_ACCOUNT_OPTION="--source-account $(SOURCE_ACCOUNT)"; \
	    fi; \
	    if test -n "$(SOURCE_ARN)";then \
	      SOURCE_ARN_OPTION="--source-arn $(SOURCE_ARN)"; \
	    fi; \
	    aws lambda add-permission --function-name $(LAMBDA_HANDLER) \
	      --action 'lambda:InvokeFunction' --statement-id $(LAMBDA_NAME)-$$$$ \
	      --principal $(LAMBDA_SERVICE) \
	      $$SOURCE_ARN_OPTION \
	      $$SOURCE_ACCOUNT_OPTION \
	      --output text >$@; \
	  fi; \
	else \
	  if test -n "$$OLD_SERVICE"; then \
	    REMOVE_SID=$$OLD_SID; \
	  fi; \
	fi; \
	if test -n "$$REMOVE_SID"; then \
	  aws lambda remove-permission --function-name $(LAMBDA_NAME) --statement-id $$REMOVE_SID; \
	  aws lambda get-policy --function-name $(LAMBDA_NAME) 2>/dev/null > $@ || true; \
	fi

	touch $@

{% if bucket is defined %}
$(BUCKET_ARN):
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if aws s3 mb s3://$(BUCKET); then \
	  echo "arn:aws:s3:::$(BUCKET)" > $@; \
	fi

$(BUCKET_NOTIFICATION): $(LAMBDA_ARN) $(BUCKET_ARN)
	makala -n $(LAMBDA_NAME)

$(GBUCKET_NOTIFICATION): $(BUCKET_NOTIFICATION)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if aws s3api put-bucket-notification-configuration --bucket $(BUCKET) \
	  --notification-configuration file://$<; then \
	  aws s3api get-bucket-notification-configuration --bucket $(BUCKET) > $@; \
	fi
{% endif %}

check: $(ZIPFILE) $(LAMBDA_ARN)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	aws lambda get-function-configuration --function-name $(LAMBDA_NAME) > $(LAMBDA_ARN); \
	STATE=$$(cat $(LAMBDA_ARN) | jq -r .State); \
	if [ "$$STATE" = "null" ]; then \
	  STATE="Active"; \
	fi; \
	echo "Function state is $$STATE"; test "$$STATE" = "Active"

{% if sqs.queue_name is defined %}
SQS_BATCHING_WINDOW = 60
SQS_BATCH_SIZE = 5

$(LAMBDA_EVENT_SOURCE): $(SQS_QUEUE_URL) $(SQS_QUEUE_ATTRIBUTES)
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	aws lambda create-event-source-mapping --function-name $(LAMBDA_NAME) \
	  --batch-size $(SQS_BATCH_SIZE) \
	  --maximum-batching-window-in-seconds $(SQS_BATCHING_WINDOW) \
	  --event-source-arn $(SQS_QUEUE_ARN)
{% endif %}

CLEANFILES = \
    $(ZIPFILE) \
    $(GLAMBDA) \
    $(GMODULES) \
    $(GPACKAGE_FILES)

plan:
	cd terraform; \
	make plan

apply:
	cd terraform; \
	make apply

test.out: $(LAMBDA_CONFIGURATION)
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	PAYLOAD="test-$(LAMBDA_HANDLER).json"; \
	if test -e "$$PAYLOAD"; then \
	  aws lambda invoke --function-name $(LAMBDA_HANDLER) --payload file://$$PAYLOAD \
	    --cli-binary-format raw-in-base64-out 

test: test.out

.PHONY: clean plan apply test

clean:
	rm -f $(CLEANFILES)

uninstall: clean
	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	aws lambda delete-function --function $(LAMBDA_HANDLER) 2>/dev/null || true; \
	aws logs delete-log-group --log-group-name $(LAMBDA_LOG_GROUP_NAME) 2>/dev/null || true

	test -n "$$DEBUG" && set -x; \
	test -n "$(AWS_PROFILE)" && export AWS_PROFILE=$(AWS_PROFILE); \
	if test -z "$(CUSTOM_ROLE)"; then \
	  if $$(aws iam list-attached-role-policies --role-name $(LAMBDA_ROLE) >/dev/null 2>&1); then \
	    for a in $$(aws iam list-attached-role-policies --role-name $(LAMBDA_ROLE) | jq -r '.AttachedPolicies|.[]|[.PolicyArn]|.[]'); do \
	      aws iam detach-role-policy --role-name $(LAMBDA_ROLE) --policy-arn $$a; \
	    done; \
	  fi; \
	  aws iam delete-role --role-name $(LAMBDA_ROLE) 2>/dev/null || true; \
	fi

	test -n "$$DEBUG" && set -x; \
	rm -f $(LAMBDA_LOG_GROUP) \
	  $(LAMBDA_PERMISSION) \
	  $(LAMBDA_ROLE_ARN) \
	  $(LAMBDA_CONFIGURATION) \
	  $(LAMBDA_ARN)
